===============================================================================
integer literals 
===============================================================================

1
0x00
1000
1_000
1_000_999
0b00111

---

(source_file
  (expression_statement
    (integer))
  (expression_statement
    (integer))
  (expression_statement
    (integer))
  (expression_statement
    (integer))
  (expression_statement
    (integer))
  (expression_statement
    (integer)))

===============================================================================
float literals 
===============================================================================

1.0;
1_000.5;
1.0e-3;
1_000.0e1_0;

---

(source_file
  (expression_statement
    (float))
  (expression_statement
    (float))
  (expression_statement
    (float))
  (expression_statement
    (float)))

===============================================================================
bool literals
===============================================================================

true
false

---

(source_file 
  (expression_statement
    (true))
  (expression_statement
    (false)))

===============================================================================
regular expression literals
===============================================================================

~/haxe/gi;

---

(source_file 
  (expression_statement
    (regex)))

===============================================================================
null literals
===============================================================================

null;

---

(source_file (expression_statement (null)))

===============================================================================
string literals
===============================================================================

"haxe";
'haxe';

---

(source_file 
  (expression_statement
    (string
      (string_fragment)))
  (expression_statement
    (string
      (string_fragment))))

===============================================================================
strings containing comment-like content literals
===============================================================================

"//ok\n//what"

---

(source_file
  (expression_statement
    (string
      (string_fragment)
      (escape_sequence)
      (string_fragment))))

===============================================================================
string quote escaping literals
===============================================================================

"";
'';
"\"";
"a\"b";
'a\'b';
"it's a tiny tiny world";
'"hello"';
'\'hello\'';

---

(source_file
  (expression_statement
    (string))
  (expression_statement
    (string))
  (expression_statement
    (string
      (escape_sequence)))
  (expression_statement
    (string
      (string_fragment)
      (escape_sequence)
      (string_fragment)))
  (expression_statement
    (string
      (string_fragment)
      (escape_sequence)
      (string_fragment)))
  (expression_statement
    (string
      (string_fragment)))
  (expression_statement
    (string
      (string_fragment)))
  (expression_statement
    (string
      (escape_sequence)
      (string_fragment)
      (escape_sequence))))

===============================================================================
string line continuations literals
===============================================================================

"hello
world";

'hello
world';

---

(source_file 
  (expression_statement
    (string
      (string_fragment)))
  (expression_statement
    (string
      (string_fragment))))

===============================================================================
string interpolation literals
===============================================================================

'Some $user say';
'My name is ${user.name} and i am';
"1 + 2 = ${1 + 2}";
'${"nested"}';

---

(source_file
  (expression_statement
    (string
      (string_fragment)
      (interpolation
        (identifier))
      (string_fragment)))
  (expression_statement
    (string
      (string_fragment)
      (interpolation
        (field_expression
          object: (identifier)
          property: (identifier)))
      (string_fragment)))
  (expression_statement
    (string
      (string_fragment)))
  (expression_statement
    (string
      (interpolation
        (string
          (string_fragment))))))

===============================================================================
array literals
===============================================================================

[];
[ "item1" ];
[ "item1", ];
[ "item1", item2 ];
[ , item2 ];
[ item2 = 5 ];

---

(source_file
  (expression_statement
    (array))
  (expression_statement
    (array
      (string
        (string_fragment))))
  (expression_statement
    (array
      (string
        (string_fragment))
      (ERROR)))
  (expression_statement
    (array
      (string
        (string_fragment))
      (identifier)))
  (expression_statement
    (array
      (ERROR)
      (identifier)))
  (expression_statement
    (array
      (binary_expression
        (identifier)
        (integer)))))

===============================================================================
object literals
===============================================================================

{ test: 23 };

---

(source_file
  (expression_statement
    (object
      (property
        key: (identifier)
        value: (integer)))))
