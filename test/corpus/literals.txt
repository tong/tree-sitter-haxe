===============================================================================
bool literals
===============================================================================

true;
false;

---

(module
  (true)
  (false))

===============================================================================
null literals
===============================================================================

null;

---

(module (null))

===============================================================================
int literals 
===============================================================================

1;
0x00;
1000;
1_000;
1_000_999;
0b00111;

---

(module
  (int)
  (int)
  (int)
  (int)
  (int)
  (int))

===============================================================================
float literals 
===============================================================================

1.0;
1_000.5;
1.0e-3;
1_000.0e1_0;

---

(module
  (float)
  (float)
  (float)
  (float))

===============================================================================
string literals
===============================================================================

"haxe";
'haxe';

---

(module
  (string
    (fragment))
  (string
    (fragment)))

===============================================================================
strings containing comment-like content literals
===============================================================================

"//ok\n//what";

---

(module
  (string
    (fragment)
    (escape_sequence)
    (fragment)))

===============================================================================
string escape sequence
===============================================================================

"";
'';
"\"";
"a\"b";
'a\'b';
"it's a tiny tiny world";
'"hello"';
'\'hello\'';

---

(module
  (string)
  (string)
  (string
    (escape_sequence))
  (string
    (fragment)
    (escape_sequence)
    (fragment))
  (string
    (fragment)
    (escape_sequence)
    (fragment))
  (string
    (fragment))
  (string
    (fragment))
  (string
    (escape_sequence)
    (fragment)
    (escape_sequence)))

===============================================================================
string line continuations literals
===============================================================================

"hello
world";

"hello

world";

'hello
world';

'hello

world';

---

(module
  (string
    (fragment))
  (string
    (fragment))
  (string
    (fragment))
  (string
    (fragment)))

===============================================================================
string interpolation literals
===============================================================================

'Some $user say';
'My name is ${user.name} and i am';
'1 + 2 = ${1 + 2}';
'${"nested"}';

---

(module
  (string
    (fragment)
    (interpolation
      (identifier))
    (fragment))
  (string
    (fragment)
    (interpolation
      (member_expr
        object: (identifier)
        field: (identifier)))
    (fragment))
  (string
    (fragment)
    (interpolation
      (binop
        left: (int)
        right: (int))))
  (string
    (interpolation
      (string
        (fragment)))))

===============================================================================
regular expression literals
===============================================================================

~/haxe/gi;

---

(module
  (regexp))

===============================================================================
array literals
===============================================================================

[];
[1, 2, 3];
["a", "b"];

---

(module
  (array)
  (array
    (int)
    (int)
    (int))
  (array
    (string
      (fragment))
    (string
      (fragment))))

===============================================================================
map literals
===============================================================================

["a" => 1, "b" => 2];
[new Key() => value];

---

(module
  (map
    (string
      (fragment))
    (int)
    (string
      (fragment))
    (int))
  (map
    (new_expr
      type: (type_path
        (type_name))
      args: (arg_list))
    (identifier)))

===============================================================================
object literals
===============================================================================

{};
{a: 1, b: 2};
{"key": "value"};

---

(module
  (object)
  (object
    (object_field
      key: (identifier)
      value: (int))
    (object_field
      key: (identifier)
      value: (int)))
  (object
    (object_field
      key: (string
        (fragment))
      value: (string
        (fragment)))))
