=============
function call
=============

fn();

---

(module
  (call_expr
    (identifier)
    (arg_list)))

===========================
optional function arguments declaration
===========================

function test(?a,b,?c) {}

---

(module
  (function_decl
    name: (identifier)
    (param_list
      (param
        (optional)
        name: (identifier))
      (param
        name: (identifier))
      (param
        (optional)
        name: (identifier)))
    (block)))

======================================
default function arguments declaration
======================================

function test(a="test", b=23, ?c=11) {}

---

(module
  (function_decl
    name: (identifier)
    (param_list
      (param
        name: (identifier)
        value: (string
          (fragment)))
      (param
        name: (identifier)
        value: (int))
      (param
        (optional)
        name: (identifier)
        value: (int)))
    (block)))

========================================
constrained generic function declaration
========================================

function test<T:Float>():T {}

---

(module
  (function_decl
    name: (identifier)
    (type_decl_params
      (type_decl_param
        (type_name)
        constraint: (type_path
          (type_name))))
    (type_path
      (type_name))
    (block)))

===================
arrow function
===================

() -> trace("some");
() -> {};
a -> {};
(a,b) -> trace(a,b);

---

(module
  (arrow_function_expr
    body: (call_expr
      function: (identifier)
      arguments: (arg_list
        (string
          (fragment)))))
  (arrow_function_expr
    body: (object))
  (arrow_function_expr
    params: (identifier)
    body: (object))
  (arrow_function_expr
    params: (param_list
      (param
        name: (identifier))
      (param
        name: (identifier)))
    body: (call_expr
      function: (identifier)
      arguments: (arg_list
        (identifier)
        (identifier)))))

===================================
function with return statement body
===================================

function test() return 23;

---

(module
  (function_decl
    name: (identifier))
  (return_expr
    (int)))
