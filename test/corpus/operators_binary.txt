===================
binary add operator
===================

1 + 2;

---

(source_file
  (expression_statement
    (binary_expression
      left: (integer)
      right: (integer))))


===================
binary operation
===================

1 + 2 * 3 % 2;

(source_file
  (expression_statement
    (binary_expression
      left: (integer)
      right: (binary_expression
        left: (binary_expression
          left: (integer)
          right: (integer))
        right: (integer)))))

====================================
binary string concatenation operator
====================================

"a" + "b";

---

(source_file
  (expression_statement
    (binary_expression
      left: (string
        (string_fragment))
      right: (string
        (string_fragment)))))

============================================
binary string and int concatenation operator
============================================

"a" + 1;

---

(source_file
  (expression_statement
    (binary_expression
      left: (string
        (string_fragment))
      right: (integer))))

============================================
binary int and string concatenation operator
============================================

1 + "a";

---

(source_file
  (expression_statement
    (binary_expression
      left: (integer)
      right: (string
        (string_fragment)))))

===============================================
binary string and is int concatenation operator
===============================================

"a" += "b";

---

(source_file
  (expression_statement
    (binary_expression
      left: (string
        (string_fragment))
      right: (string
        (string_fragment)))))
