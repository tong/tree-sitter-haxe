======================
array comprehension: for
======================

[for (i in 0...10) i * i];

---

(source_file
  (expression_statement
    (array
      iterator: (identifier)
      iterable: (binary_expression
        left: (integer)
        right: (integer))
      result: (binary_expression
        left: (identifier)
        right: (identifier)))))

============================
array comprehension: for if
============================

[for (i in 0...10) if (i % 2 == 0) i];

---

(source_file
  (expression_statement
    (array
      iterator: (identifier)
      iterable: (binary_expression
        left: (integer)
        right: (integer))
      condition: (parenthesized_expression
        (binary_expression
          left: (binary_expression
            left: (identifier)
            right: (integer))
          right: (integer)))
      result: (identifier))))

=========================
array comprehension: while
=========================

[while (i < 10) i++];

---

(source_file
  (expression_statement
    (array
      condition: (parenthesized_expression
        (binary_expression
          left: (identifier)
          right: (integer)))
      result: (update_expression
        argument: (identifier)))))

====================
map comprehension: for
====================

[for (i in 0...5) i => 'number ${i}'];

---

(source_file
  (expression_statement
    (map
      iterator: (identifier)
      iterable: (binary_expression
        left: (integer)
        right: (integer))
      result: (key_value_pair
        key: (identifier)
        value: (string
          (string_fragment)
          (interpolation
            (identifier)))))))

==========================
map comprehension: for if
==========================

[for (i in 0...5) if (i % 2 == 0) i => i * i];

---

(source_file
  (expression_statement
    (map
      iterator: (identifier)
      iterable: (binary_expression
        left: (integer)
        right: (integer))
      condition: (parenthesized_expression
        (binary_expression
          left: (binary_expression
            left: (identifier)
            right: (integer))
          right: (integer)))
      result: (key_value_pair
        key: (identifier)
        value: (binary_expression
          left: (identifier)
          right: (identifier))))))

=======================
map comprehension: while
=======================

[while (i < 5) i++ => i];

---

(source_file
  (expression_statement
    (map
      condition: (parenthesized_expression
        (binary_expression
          left: (identifier)
          right: (integer)))
      result: (key_value_pair
        key: (update_expression
          argument: (identifier))
        value: (identifier)))))
