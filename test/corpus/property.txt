========
property
========

var ro(default, null):Int;
var wo(null, default):Int;
var x(get, set):Int;
var y(get, never):Int;
final z(get, never):Int;

---

(module
  (var_decl
    name: (identifier)
    (property_accessor
      get: (property_access_identifier)
      set: (property_access_identifier))
    type: (type_path
      (type_name)))
  (var_decl
    name: (identifier)
    (property_accessor
      get: (property_access_identifier)
      set: (property_access_identifier))
    type: (type_path
      (type_name)))
  (var_decl
    name: (identifier)
    (property_accessor
      get: (property_access_identifier)
      set: (property_access_identifier))
    type: (type_path
      (type_name)))
  (var_decl
    name: (identifier)
    (property_accessor
      get: (property_access_identifier)
      set: (property_access_identifier))
    type: (type_path
      (type_name)))
  (var_decl
    name: (identifier)
    (property_accessor
      get: (property_access_identifier)
      set: (property_access_identifier))
    type: (type_path
      (type_name))))

=================================
property with nested generic type
=================================

private var children(default, null):Array<Node<T>>;

---

(module
  (var_decl
    (private)
    name: (identifier)
    (property_accessor
      get: (property_access_identifier)
      set: (property_access_identifier))
    type: (type_path
      (type_name)
      (type_params
        (type_path
          (type_name)
          (type_params
            (type_path
              (type_name))))))))
