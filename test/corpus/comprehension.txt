======================
array comprehension: for
======================

[for (i in 0...10) i * i];

---

(module
  (EArrayDecl
    (EFor
      var: (identifier)
      iterable: (EBinop
        left: (Int)
        right: (Int))
      body: (EBinop
        left: (identifier)
        right: (identifier)))))

============================
array comprehension: for if
============================

[for (i in 0...10) if (i % 2 == 0) i];

---

(module
  (EArrayDecl
    (EFor
      var: (identifier)
      iterable: (EBinop
        left: (Int)
        right: (Int))
      body: (EIf
        condition: (EBinop
          left: (EBinop
            left: (identifier)
            right:  (Int))
          right: (Int))
        consequence: (identifier)))))

=========================
array comprehension: while
=========================

[while (i < 10) i++];

---

(module
  (EArrayDecl
    (EWhile
      condition: (EBinop
        left: (identifier)
        right: (Int))
      body: (EUnop
        operand: (identifier)))))

======================
map comprehension: for
======================

[for (i in 0...5) i => 'number ${i}'];

---

(module
  (EArrayDecl
    (EFor
      var: (identifier)
      iterable: (EBinop
        left: (Int)
        right: (Int))
      body: (EBinop
        left: (identifier)
        right: (String
            (fragment)
            (interpolation
              (identifier)))))))

=========================
map comprehension: for if
=========================

[for (i in 0...5) if (i % 2 == 0) i => i * i];

---

(module
  (EArrayDecl
    (EFor
      var: (identifier)
      iterable: (EBinop
        left: (Int)
        right: (Int))
      body: (EIf
        condition: (EBinop
          left: (EBinop
            left: (identifier)
            right: (Int))
          right: (Int))
        consequence: (EBinop
          left: (identifier)
          right: (EBinop
            left: (identifier)
            right: (identifier)))))))

========================
map comprehension: while
========================

[while (i < 5) i++ => i];

---

(module
  (EArrayDecl
    (EWhile
      condition: (EBinop
        left: (identifier)
        right: (Int))
      body: (EBinop
        left: (EUnop
          operand: (identifier))
        right: (identifier)))))
