======================
array comprehension: for
======================

[for (i in 0...10) i * i];

---

(module
  (EArrayDecl
    (EFor
      var: (identifier)
      iterable: (EBinop
        left: (EConst
          (Int))
        right: (EConst
          (Int)))
      body: (EBinop
        left: (EConst
          (identifier))
        right: (EConst
          (identifier))))))

============================
array comprehension: for if
============================

[for (i in 0...10) if (i % 2 == 0) i];

---

(module
  (EArrayDecl
    (EFor
      var: (identifier)
      iterable: (EBinop
        left: (EConst
          (Int))
        right: (EConst
          (Int)))
      body: (EIf
        condition: (EBinop
          left: (EBinop
            left: (EConst
              (identifier))
            right: (EConst
              (Int)))
          right: (EConst
            (Int)))
        consequence: (EConst
          (identifier))))))

=========================
array comprehension: while
=========================

[while (i < 10) i++];

---

(module
  (EArrayDecl
    (EWhile
      condition: (EBinop
        left: (EConst
          (identifier))
        right: (EConst
          (Int)))
      body: (EUnop
        operand: (EConst
          (identifier))))))

======================
map comprehension: for
======================

[for (i in 0...5) i => 'number ${i}'];

---

(module
  (EArrayDecl
    (EFor
      var: (identifier)
      iterable: (EBinop
        left: (EConst
          (Int))
        right: (EConst
          (Int)))
      body: (EBinop
        left: (EConst
          (identifier))
        right: (EConst
          (String
            (fragment)
            (interpolation
              (EConst
                (identifier)))))))))

=========================
map comprehension: for if
=========================

[for (i in 0...5) if (i % 2 == 0) i => i * i];

---

(module
  (EArrayDecl
    (EFor
      var: (identifier)
      iterable: (EBinop
        left: (EConst
          (Int))
        right: (EConst
          (Int)))
      body: (EIf
        condition: (EBinop
          left: (EBinop
            left: (EConst
              (identifier))
            right: (EConst
              (Int)))
          right: (EConst
            (Int)))
        consequence: (EBinop
          left: (EConst
            (identifier))
          right: (EBinop
            left: (EConst
              (identifier))
            right: (EConst
              (identifier))))))))

========================
map comprehension: while
========================

[while (i < 5) i++ => i];

---

(module
  (EArrayDecl
    (EWhile
      condition: (EBinop
        left: (EConst
          (identifier))
        right: (EConst
          (Int)))
      body: (EBinop
        left: (EUnop
          operand: (EConst
            (identifier)))
        right: (EConst
          (identifier))))))
